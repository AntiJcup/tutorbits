{"version":3,"sources":["base-preview.ts","js-preview.ts"],"names":[],"mappings":";AAGsB,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,MAAA,KAAA,aAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,MAAA,EAAA,KAAA,WAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,KAAA,GAAA,IAAA,IAAA,OAAA,EAAA,CAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,mBAAA,SAAA,EAAA,OAAA,UAAA,WAAA,OAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,SAAA,GAAA,OAAA,SAAA,GAAA,GAAA,EAAA,MAAA,IAAA,UAAA,mCAAA,KAAA,GAAA,IAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,GAAA,EAAA,SAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,KAAA,OAAA,EAAA,OAAA,EAAA,EAAA,IAAA,EAAA,CAAA,EAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,KAAA,EAAA,KAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,OAAA,EAAA,QAAA,CAAA,MAAA,EAAA,GAAA,MAAA,GAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,GAAA,EAAA,CAAA,GAAA,SAAA,KAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,QAAA,KAAA,GAAA,EAAA,EAAA,MAAA,OAAA,GAAA,EAAA,EAAA,OAAA,MAAA,IAAA,EAAA,IAAA,IAAA,EAAA,IAAA,CAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,MAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,CAAA,EAAA,MAAA,EAAA,GAAA,MAAA,GAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,MAAA,GAAA,GAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,KAAA,GAAA,MAAA,EAAA,IAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,EAAA,EAAA,KAAA,EAAA,GAAA,MAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,MAAA,CAAA,MAAA,EAAA,GAAA,EAAA,QAAA,EAAA,MAAA,GAAA,CAAA,CAAA,EAAA,OAAA,EAAA,MAAA,KAAA,gBAAA,WAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,GAAA,UAAA,GAAA,OAAA,IAAA,EAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,EAAA,UAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,EAAtB,IAAA,EAAA,WAQI,SAAA,IACS,KAAA,UAAY,SAAS,cAAc,kBACnC,KAAA,aAAe,SAAS,cAAc,eACtC,KAAA,UAAY,IAAI,gBAAgB,OAAO,SAAS,QAChD,KAAA,QAAU,GACV,KAAA,aAAe,GACf,KAAA,WAAa,GAEb,KAAA,wBAwEb,OArEY,EAAA,UAAA,sBAAR,WAAA,IAAA,EAAA,KAEU,EAAqB,QAAQ,IACnC,QAAQ,IAAM,WACV,EAAmB,KAAK,OAAQ,WAC1B,IAAA,EAAW,EAAI,WACf,EAAY,GAAG,OAAO,GAAU,KAAK,KAC3C,EAAK,UAAW,WAAa,QAAU,EAAY,SAGjD,IAAA,EAAuB,QAAQ,MACrC,QAAQ,MAAQ,WACZ,EAAqB,KAAK,OAAQ,WAC5B,IAAA,EAAW,EAAI,WACf,EAAY,GAAG,OAAO,GAAU,KAAK,KAC3C,EAAK,UAAW,WAAa,UAAY,EAAY,SAGzD,OAAO,QAAU,SAAU,EAAuB,EAAiB,EAAiB,EAAgB,GAC1F,IAAA,EAAW,EAAI,WACrB,QAAQ,MAAM,GAAG,OAAO,GAAU,KAAK,QAIlC,EAAA,UAAA,WAAb,WAA2B,OAAA,EAAA,UAAA,EAAA,QAAO,WA3ChB,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EAqDd,OATA,QAAQ,IAAI,sCACN,EAAe,KAAK,UAAU,IAAI,QACnC,KAAA,WAAa,KAAK,UAAU,IAAI,UAC/B,EAAuB,KAAK,MAAM,mBAAmB,KAAK,UAAU,IAAI,gBACxE,EAAQ,EAAA,CAAI,KAAK,YAAgB,GAAc,IAE/C,EAAmB,KAAK,YAAY,EAAM,KAAK,WAAa,GAC5D,EAA2B,CAAC,GAElC,CAAA,EAAM,QAAQ,IAAI,IArDJ,KAAA,EAAA,OAqDd,EAAA,OACA,QAAQ,IAAI,sCAtDE,CAAA,SAyDL,EAAA,UAAA,MAAb,WAAsB,OAAA,EAAA,UAAA,EAAA,QAAO,WAzDX,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EA0Dd,MAAA,CAAA,EAAM,KAAK,eA1DG,KAAA,EAAA,OA0Dd,EAAA,OA1Dc,CAAA,SA6DF,EAAA,UAAA,YAAhB,SAA4B,EAAc,EAAgB,GAAkB,OAAA,EAAA,UAAA,EAAA,QAAO,WA7DjE,IAAA,EAAA,EAAA,EAAA,EAAA,KAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EAgEH,IAAA,KAFX,QAAQ,IAAI,8BACN,EAAqC,GAChC,EAAA,SAAA,GACD,IAAA,EAAS,mBAAsB,EAAI,IAAI,GACvC,EAAO,EAAM,GACnB,QAAQ,IAAI,8BAA8B,GAC1C,EAAa,KAAK,IAAI,QAAc,SAAC,GACjC,MAAM,GAAQ,KAAK,SAAC,GAChB,QAAQ,IAAI,6BAA6B,GACzC,EAAS,OAAO,KAAK,SAAC,GAClB,EAAK,QAAQ,GAAQ,EACjB,IAAW,IACX,EAAK,aAAe,EACpB,EAAK,aAAc,OAAS,GAEhC,YAbQ,EAAb,EAAA,GAmBX,MAAA,CAAA,EAAM,QAAQ,IAAI,IAnFJ,KAAA,EAAA,OAmFd,EAAA,OACA,QAAQ,IAAI,uCApFE,CAAA,SAwFtB,EAxFA,GAAsB,QAAA,YAAA;;ACDT,aAAA,IAAA,UAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,UAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,YAAA,MAAA,KAAA,aAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,MAAA,EAAA,KAAA,WAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,KAAA,GAAA,IAAA,IAAA,OAAA,EAAA,CAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,mBAAA,SAAA,EAAA,OAAA,UAAA,WAAA,OAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,SAAA,GAAA,OAAA,SAAA,GAAA,GAAA,EAAA,MAAA,IAAA,UAAA,mCAAA,KAAA,GAAA,IAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,GAAA,EAAA,SAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,KAAA,OAAA,EAAA,OAAA,EAAA,EAAA,IAAA,EAAA,CAAA,EAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,KAAA,EAAA,KAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,OAAA,EAAA,QAAA,CAAA,MAAA,EAAA,GAAA,MAAA,GAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,GAAA,EAAA,CAAA,GAAA,SAAA,KAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,QAAA,KAAA,GAAA,EAAA,EAAA,MAAA,OAAA,GAAA,EAAA,EAAA,OAAA,MAAA,IAAA,EAAA,IAAA,IAAA,EAAA,IAAA,CAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,MAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,CAAA,EAAA,MAAA,EAAA,GAAA,MAAA,GAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,MAAA,GAAA,GAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,KAAA,GAAA,MAAA,EAAA,IAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,EAAA,EAAA,KAAA,EAAA,GAAA,MAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,MAAA,CAAA,MAAA,EAAA,GAAA,EAAA,QAAA,EAAA,MAAA,GAAA,CAAA,CAAA,EAAA,OAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAFb,IAAA,eAAA,QAAA,6BAEA,UAAA,SAAA,QAAA,SAAA,YAAa,OAAA,OAAA,QAAA,OAAA,MAAA,KAAA,YAAA,KASb,OAT+B,UAAA,UAAA,QACX,UAAA,UAAA,YAAhB,WAA+B,OAAA,UAAA,UAAA,EAAA,QAAO,WAD7B,OAAA,YAAA,KAAA,SAAA,IAEL,QAAQ,IAAI,gCAAgC,KAAK,YAC7C,IACA,KAAK,KAAK,cACZ,MAAO,GACL,QAAQ,MAAM,GANb,MAAA,CAAA,QASb,UATA,CAA+B,eAAA,aAAlB,QAAA,UAAA","file":"js-preview.js","sourceRoot":"..\\..\\..\\src\\previews\\languages\\js","sourcesContent":["import { ExecuteCommand, ExecuteInteractCommand } from '../../shared/types'\r\nimport { ExecuteResponse } from '../../shared/plugin-types'\r\n\r\nexport abstract class BasePreview {\r\n    private outputDiv: Element | null;\r\n    private sourceIframe: HTMLIFrameElement | null;\r\n    protected urlParams: URLSearchParams;\r\n    protected sources: { [path: string]: string };\r\n    protected targetSource: string | undefined;\r\n    protected targetPath: string | undefined;\r\n\r\n    constructor() {\r\n        this.outputDiv = document.querySelector('#consoleOutput');\r\n        this.sourceIframe = document.querySelector('#sourceCode');\r\n        this.urlParams = new URLSearchParams(window.location.search);\r\n        this.sources = {};\r\n        this.targetSource = '';\r\n        this.targetPath = '';\r\n\r\n        this.overrideNativeLogging();\r\n    }\r\n\r\n    private overrideNativeLogging(): void {\r\n        //Overriding log, error, and window.onerror are mainly for javascript and typescript previews\r\n        const originalConsoleLog = console.log;\r\n        console.log = () => {\r\n            originalConsoleLog.call(window, arguments);\r\n            const argArray = [...arguments] as any;\r\n            const argString = [].concat(argArray).join(' ');\r\n            this.outputDiv!.innerHTML += 'Log: ' + argString + '<br/>';\r\n        }\r\n\r\n        const originalConsoleError = console.error;\r\n        console.error = () => {\r\n            originalConsoleError.call(window, arguments);\r\n            const argArray = [...arguments] as any;\r\n            const argString = [].concat(argArray).join(' ');\r\n            this.outputDiv!.innerHTML += 'Error: ' + argString + '<br/>';\r\n        }\r\n\r\n        window.onerror = function (event: Event | string, source?: string, lineno?: number, colno?: number, error?: Error) {\r\n            const argArray = [...arguments] as any;\r\n            console.error([].concat(argArray).join(' '));\r\n        };\r\n    }\r\n\r\n    public async initialize(): Promise<void> {\r\n        console.log(`INTERNAL - Starting Initialization`);\r\n        const base: string = this.urlParams.get('base')!;\r\n        this.targetPath = this.urlParams.get('target')!;\r\n        const otherPaths: string[] = JSON.parse(decodeURIComponent(this.urlParams.get('otherPaths')!));\r\n        const allPaths = [this.targetPath, ...(otherPaths || [])];\r\n\r\n        const pathsLoadPromise = this.loadSources(base, this.targetPath!, allPaths);\r\n        const promises: Promise<any>[] = [pathsLoadPromise];\r\n\r\n        await Promise.all(promises);\r\n        console.log(`INTERNAL - Finished Initialization`);\r\n    }\r\n\r\n    public async start(): Promise<void> {\r\n        await this.executeCode();\r\n    }\r\n\r\n    protected async loadSources(base: string, target: string, paths: string[]): Promise<void> {\r\n        console.log(`INTERNAL - Loading Sources`);\r\n        const loadPromises: Array<Promise<void>> = [];\r\n        for (const pathIndex in paths) {\r\n            const source = decodeURIComponent(`${base}/${target}`);\r\n            const path = paths[pathIndex];\r\n            console.log(`INTERNAL - Loading Source: ${path}`);\r\n            loadPromises.push(new Promise<void>((resolve) => {\r\n                fetch(source).then((response) => {\r\n                    console.log(`INTERNAL - Loaded Source: ${path}`);\r\n                    response.text().then((t) => {\r\n                        this.sources[path] = t;\r\n                        if (target === path) {\r\n                            this.targetSource = t;\r\n                            this.sourceIframe!.srcdoc = t;\r\n                        }\r\n                        resolve();\r\n                    });\r\n                })\r\n            }));\r\n        }\r\n\r\n        await Promise.all(loadPromises);\r\n        console.log(`INTERNAL - Finished Loading Sources`);\r\n    }\r\n\r\n    protected abstract async executeCode(): Promise<void>;\r\n}","import { BasePreview } from \"../../shared/base-preview\";\r\n\r\nexport class JSPreview extends BasePreview {\r\n    protected async executeCode(): Promise<void> {\r\n        console.log(`INTERNAL - Executing script: ${this.targetPath}`);\r\n        try {\r\n            eval(this.targetSource!);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}"]}