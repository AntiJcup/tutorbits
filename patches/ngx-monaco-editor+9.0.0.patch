diff --git a/node_modules/ngx-monaco-editor/__ivy_ngcc__/fesm2015/ngx-monaco-editor.js b/node_modules/ngx-monaco-editor/__ivy_ngcc__/fesm2015/ngx-monaco-editor.js
new file mode 100644
index 0000000..e827175
--- /dev/null
+++ b/node_modules/ngx-monaco-editor/__ivy_ngcc__/fesm2015/ngx-monaco-editor.js
@@ -0,0 +1,374 @@
+import { __decorate, __metadata, __param } from 'tslib';
+import { EventEmitter, ViewChild, ElementRef, Output, InjectionToken, NgZone, Inject, Input, Component, forwardRef, NgModule } from '@angular/core';
+import { NG_VALUE_ACCESSOR } from '@angular/forms';
+import { fromEvent } from 'rxjs';
+import { CommonModule } from '@angular/common';
+
+import * as ɵngcc0 from '@angular/core';
+
+const _c0 = ["editorContainer"];
+const _c1 = "[_nghost-%COMP%] {\n      display: block;\n      height: 200px;\n    }\n\n    .editor-container[_ngcontent-%COMP%] {\n      width: 100%;\n      height: 98%;\n    }";
+let loadedMonaco = false;
+let loadPromise;
+class BaseEditor {
+    constructor(config) {
+        this.config = config;
+        this.onInit = new EventEmitter();
+    }
+    ngAfterViewInit() {
+        if (loadedMonaco) {
+            // Wait until monaco editor is available
+            loadPromise.then(() => {
+                this.initMonaco(this._options);
+            });
+        }
+        else {
+            loadedMonaco = true;
+            loadPromise = new Promise((resolve) => {
+                const baseUrl = this.config.baseUrl || './assets';
+                if (typeof (window.monaco) === 'object') {
+                    resolve();
+                    return;
+                }
+                const onGotAmdLoader = () => {
+                    // Load monaco
+                    window.require.config({ paths: { 'vs': `${baseUrl}/monaco/vs` } });
+                    window.require(['vs/editor/editor.main'], () => {
+                        if (typeof this.config.onMonacoLoad === 'function') {
+                            this.config.onMonacoLoad();
+                        }
+                        this.initMonaco(this._options);
+                        resolve();
+                    });
+                };
+                // Load AMD loader if necessary
+                if (!window.require) {
+                    const loaderScript = document.createElement('script');
+                    loaderScript.type = 'text/javascript';
+                    loaderScript.src = `${baseUrl}/monaco/vs/loader.js`;
+                    loaderScript.addEventListener('load', onGotAmdLoader);
+                    document.body.appendChild(loaderScript);
+                }
+                else {
+                    onGotAmdLoader();
+                }
+            });
+        }
+    }
+    ngOnDestroy() {
+        if (this._windowResizeSubscription) {
+            this._windowResizeSubscription.unsubscribe();
+        }
+        if (this._editor) {
+            this._editor.dispose();
+            this._editor = undefined;
+        }
+    }
+}
+BaseEditor.ɵfac = function BaseEditor_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };
+BaseEditor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: BaseEditor, viewQuery: function BaseEditor_Query(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
+    } if (rf & 2) {
+        var _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._editorContainer = _t.first);
+    } }, outputs: { onInit: "onInit" } });
+__decorate([
+    ViewChild('editorContainer', { static: true }),
+    __metadata("design:type", ElementRef)
+], BaseEditor.prototype, "_editorContainer", void 0);
+__decorate([
+    Output(),
+    __metadata("design:type", Object)
+], BaseEditor.prototype, "onInit", void 0);
+
+const NGX_MONACO_EDITOR_CONFIG = new InjectionToken('NGX_MONACO_EDITOR_CONFIG');
+
+var EditorComponent_1;
+let EditorComponent = EditorComponent_1 = class EditorComponent extends BaseEditor {
+    constructor(zone, editorConfig) {
+        super(editorConfig);
+        this.zone = zone;
+        this.editorConfig = editorConfig;
+        this._value = '';
+        this.propagateChange = (_) => { };
+        this.onTouched = () => { };
+    }
+    set options(options) {
+        this._options = Object.assign({}, this.config.defaultOptions, options);
+        if (this._editor) {
+            this._editor.dispose();
+            this.initMonaco(options);
+        }
+    }
+    get options() {
+        return this._options;
+    }
+    set model(model) {
+        this.options.model = model;
+        if (this._editor) {
+            this._editor.dispose();
+            this.initMonaco(this.options);
+        }
+    }
+    writeValue(value) {
+        this._value = value || '';
+        // Fix for value change while dispose in process.
+        setTimeout(() => {
+            if (this._editor && !this.options.model) {
+                this._editor.setValue(this._value);
+            }
+        });
+    }
+    registerOnChange(fn) {
+        this.propagateChange = fn;
+    }
+    registerOnTouched(fn) {
+        this.onTouched = fn;
+    }
+    initMonaco(options) {
+        const hasModel = !!options.model;
+        if (hasModel) {
+            const model = monaco.editor.getModel(options.model.uri || '');
+            if (model) {
+                options.model = model;
+                options.model.setValue(this._value);
+            }
+            else {
+                options.model = monaco.editor.createModel(options.model.value, options.model.language, options.model.uri);
+            }
+        }
+        this._editor = monaco.editor.create(this._editorContainer.nativeElement, options);
+        if (!hasModel) {
+            this._editor.setValue(this._value);
+        }
+        this._editor.onDidChangeModelContent((e) => {
+            const value = this._editor.getValue();
+            // value is not propagated to parent when executing outside zone.
+            this.zone.run(() => {
+                this.propagateChange(value);
+                this._value = value;
+            });
+        });
+        this._editor.onDidBlurEditorWidget(() => {
+            this.onTouched();
+        });
+        // refresh layout on resize event.
+        if (this._windowResizeSubscription) {
+            this._windowResizeSubscription.unsubscribe();
+        }
+        this._windowResizeSubscription = fromEvent(window, 'resize').subscribe(() => this._editor.layout());
+        this.onInit.emit(this._editor);
+    }
+};
+EditorComponent.ɵfac = function EditorComponent_Factory(t) { return new (t || EditorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(NGX_MONACO_EDITOR_CONFIG)); };
+EditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: EditorComponent, selectors: [["ngx-monaco-editor"]], inputs: { options: "options", model: "model" }, features: [ɵngcc0.ɵɵProvidersFeature([{
+                provide: NG_VALUE_ACCESSOR,
+                useExisting: forwardRef(() => EditorComponent_1),
+                multi: true
+            }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 0, consts: [[1, "editor-container"], ["editorContainer", ""]], template: function EditorComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelement(0, "div", 0, 1);
+    } }, styles: [_c1] });
+EditorComponent.ctorParameters = () => [
+    { type: NgZone },
+    { type: undefined, decorators: [{ type: Inject, args: [NGX_MONACO_EDITOR_CONFIG,] }] }
+];
+__decorate([
+    Input('options'),
+    __metadata("design:type", Object),
+    __metadata("design:paramtypes", [Object])
+], EditorComponent.prototype, "options", null);
+__decorate([
+    Input('model'),
+    __metadata("design:type", Object),
+    __metadata("design:paramtypes", [Object])
+], EditorComponent.prototype, "model", null);
+EditorComponent = EditorComponent_1 = __decorate([ __param(1, Inject(NGX_MONACO_EDITOR_CONFIG)),
+    __metadata("design:paramtypes", [NgZone, Object])
+], EditorComponent);
+
+let DiffEditorComponent = class DiffEditorComponent extends BaseEditor {
+    constructor(editorConfig) {
+        super(editorConfig);
+        this.editorConfig = editorConfig;
+    }
+    set options(options) {
+        this._options = Object.assign({}, this.config.defaultOptions, options);
+        if (this._editor) {
+            this._editor.dispose();
+            this.initMonaco(options);
+        }
+    }
+    get options() {
+        return this._options;
+    }
+    set originalModel(model) {
+        this._originalModel = model;
+        if (this._editor) {
+            this._editor.dispose();
+            this.initMonaco(this.options);
+        }
+    }
+    set modifiedModel(model) {
+        this._modifiedModel = model;
+        if (this._editor) {
+            this._editor.dispose();
+            this.initMonaco(this.options);
+        }
+    }
+    initMonaco(options) {
+        if (!this._originalModel || !this._modifiedModel) {
+            throw new Error('originalModel or modifiedModel not found for ngx-monaco-diff-editor');
+        }
+        this._originalModel.language = this._originalModel.language || options.language;
+        this._modifiedModel.language = this._modifiedModel.language || options.language;
+        let originalModel = monaco.editor.createModel(this._originalModel.code, this._originalModel.language);
+        let modifiedModel = monaco.editor.createModel(this._modifiedModel.code, this._modifiedModel.language);
+        this._editorContainer.nativeElement.innerHTML = '';
+        const theme = options.theme;
+        this._editor = monaco.editor.createDiffEditor(this._editorContainer.nativeElement, options);
+        options.theme = theme;
+        this._editor.setModel({
+            original: originalModel,
+            modified: modifiedModel
+        });
+        // refresh layout on resize event.
+        if (this._windowResizeSubscription) {
+            this._windowResizeSubscription.unsubscribe();
+        }
+        this._windowResizeSubscription = fromEvent(window, 'resize').subscribe(() => this._editor.layout());
+        this.onInit.emit(this._editor);
+    }
+};
+DiffEditorComponent.ɵfac = function DiffEditorComponent_Factory(t) { return new (t || DiffEditorComponent)(ɵngcc0.ɵɵdirectiveInject(NGX_MONACO_EDITOR_CONFIG)); };
+DiffEditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DiffEditorComponent, selectors: [["ngx-monaco-diff-editor"]], inputs: { options: "options", originalModel: "originalModel", modifiedModel: "modifiedModel" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 0, consts: [[1, "editor-container"], ["editorContainer", ""]], template: function DiffEditorComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelement(0, "div", 0, 1);
+    } }, styles: [_c1] });
+DiffEditorComponent.ctorParameters = () => [
+    { type: undefined, decorators: [{ type: Inject, args: [NGX_MONACO_EDITOR_CONFIG,] }] }
+];
+__decorate([
+    Input('options'),
+    __metadata("design:type", Object),
+    __metadata("design:paramtypes", [Object])
+], DiffEditorComponent.prototype, "options", null);
+__decorate([
+    Input('originalModel'),
+    __metadata("design:type", Object),
+    __metadata("design:paramtypes", [Object])
+], DiffEditorComponent.prototype, "originalModel", null);
+__decorate([
+    Input('modifiedModel'),
+    __metadata("design:type", Object),
+    __metadata("design:paramtypes", [Object])
+], DiffEditorComponent.prototype, "modifiedModel", null);
+DiffEditorComponent = __decorate([ __param(0, Inject(NGX_MONACO_EDITOR_CONFIG)),
+    __metadata("design:paramtypes", [Object])
+], DiffEditorComponent);
+
+var MonacoEditorModule_1;
+let MonacoEditorModule = MonacoEditorModule_1 = class MonacoEditorModule {
+    static forRoot(config = {}) {
+        return {
+            ngModule: MonacoEditorModule_1,
+            providers: [
+                { provide: NGX_MONACO_EDITOR_CONFIG, useValue: config }
+            ]
+        };
+    }
+};
+MonacoEditorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MonacoEditorModule });
+MonacoEditorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MonacoEditorModule_Factory(t) { return new (t || MonacoEditorModule)(); }, imports: [[
+            CommonModule
+        ]] });
+
+/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EditorComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-monaco-editor',
+                template: '<div class="editor-container" #editorContainer></div>',
+                providers: [{
+                        provide: NG_VALUE_ACCESSOR,
+                        useExisting: forwardRef(() => EditorComponent_1),
+                        multi: true
+                    }],
+                styles: [`
+    :host {
+      display: block;
+      height: 200px;
+    }
+
+    .editor-container {
+      width: 100%;
+      height: 98%;
+    }
+  `]
+            }]
+    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{
+                type: Inject,
+                args: [NGX_MONACO_EDITOR_CONFIG]
+            }] }]; }, { options: [{
+            type: Input,
+            args: ['options']
+        }], model: [{
+            type: Input,
+            args: ['model']
+        }] }); })();
+/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DiffEditorComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-monaco-diff-editor',
+                template: '<div class="editor-container" #editorContainer></div>',
+                styles: [`
+    :host {
+      display: block;
+      height: 200px;
+    }
+
+    .editor-container {
+      width: 100%;
+      height: 98%;
+    }
+  `]
+            }]
+    }], function () { return [{ type: undefined, decorators: [{
+                type: Inject,
+                args: [NGX_MONACO_EDITOR_CONFIG]
+            }] }]; }, { options: [{
+            type: Input,
+            args: ['options']
+        }], originalModel: [{
+            type: Input,
+            args: ['originalModel']
+        }], modifiedModel: [{
+            type: Input,
+            args: ['modifiedModel']
+        }] }); })();
+(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MonacoEditorModule, { declarations: function () { return [EditorComponent, DiffEditorComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [EditorComponent, DiffEditorComponent]; } }); })();
+/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MonacoEditorModule, [{
+        type: NgModule,
+        args: [{
+                imports: [
+                    CommonModule
+                ],
+                declarations: [
+                    EditorComponent,
+                    DiffEditorComponent
+                ],
+                exports: [
+                    EditorComponent,
+                    DiffEditorComponent
+                ]
+            }]
+    }], null, null); })();
+
+/*
+ * Public API Surface of my-lib
+ */
+
+/**
+ * Generated bundle index. Do not edit.
+ */
+
+export { DiffEditorComponent, EditorComponent, MonacoEditorModule, NGX_MONACO_EDITOR_CONFIG, BaseEditor as ɵa };
+
+//# sourceMappingURL=ngx-monaco-editor.js.map
\ No newline at end of file
diff --git a/node_modules/ngx-monaco-editor/__ivy_ngcc__/fesm2015/ngx-monaco-editor.js.map b/node_modules/ngx-monaco-editor/__ivy_ngcc__/fesm2015/ngx-monaco-editor.js.map
new file mode 100644
index 0000000..b6c3e9c
--- /dev/null
+++ b/node_modules/ngx-monaco-editor/__ivy_ngcc__/fesm2015/ngx-monaco-editor.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"ngx-monaco-editor.js","sources":["ng:/ngx-monaco-editor/lib/base-editor.ts","ng:/ngx-monaco-editor/lib/config.ts","ng:/ngx-monaco-editor/lib/editor.component.ts","ng:/ngx-monaco-editor/lib/diff-editor.component.ts","ng:/ngx-monaco-editor/lib/editor.module.ts","ng:/ngx-monaco-editor/public-api.ts","ng:/ngx-monaco-editor/ngx-monaco-editor.ts"],"names":[],"mappings":"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","sourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, Input, OnDestroy, Output, ViewChild } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { NgxMonacoEditorConfig } from './config';\n\nlet loadedMonaco = false;\nlet loadPromise: Promise<void>;\ndeclare const require: any;\n\nexport abstract class BaseEditor implements AfterViewInit, OnDestroy {\n  @ViewChild('editorContainer', { static: true }) _editorContainer: ElementRef;\n  @Output() onInit = new EventEmitter<any>();\n  protected _editor: any;\n  protected _options: any;\n  protected _windowResizeSubscription: Subscription;\n\n  constructor(protected config: NgxMonacoEditorConfig) {}\n\n  ngAfterViewInit(): void {\n    if (loadedMonaco) {\n      // Wait until monaco editor is available\n      loadPromise.then(() => {\n        this.initMonaco(this._options);\n      });\n    } else {\n      loadedMonaco = true;\n      loadPromise = new Promise<void>((resolve: any) => {\n        const baseUrl = this.config.baseUrl || './assets';\n        if (typeof ((<any>window).monaco) === 'object') {\n          resolve();\n          return;\n        }\n        const onGotAmdLoader: any = () => {\n          // Load monaco\n          (<any>window).require.config({ paths: { 'vs': `${baseUrl}/monaco/vs` } });\n          (<any>window).require(['vs/editor/editor.main'], () => {\n            if (typeof this.config.onMonacoLoad === 'function') {\n              this.config.onMonacoLoad();\n            }\n            this.initMonaco(this._options);\n            resolve();\n          });\n        };\n\n        // Load AMD loader if necessary\n        if (!(<any>window).require) {\n          const loaderScript: HTMLScriptElement = document.createElement('script');\n          loaderScript.type = 'text/javascript';\n          loaderScript.src = `${baseUrl}/monaco/vs/loader.js`;\n          loaderScript.addEventListener('load', onGotAmdLoader);\n          document.body.appendChild(loaderScript);\n        } else {\n          onGotAmdLoader();\n        }\n      });\n    }\n  }\n\n  protected abstract initMonaco(options: any): void;\n\n  ngOnDestroy() {\n    if (this._windowResizeSubscription) {\n      this._windowResizeSubscription.unsubscribe();\n    }\n    if (this._editor) {\n      this._editor.dispose();\n      this._editor = undefined;\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const NGX_MONACO_EDITOR_CONFIG = new InjectionToken('NGX_MONACO_EDITOR_CONFIG');\n\nexport interface NgxMonacoEditorConfig {\n  baseUrl?: string;\n  defaultOptions?: { [key: string]: any; },\n  onMonacoLoad?: Function;\n}\n","import { Component, forwardRef, Inject, Input, NgZone } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { fromEvent } from 'rxjs';\n\nimport { BaseEditor } from './base-editor';\nimport { NGX_MONACO_EDITOR_CONFIG, NgxMonacoEditorConfig } from './config';\nimport { NgxEditorModel } from './types';\n\n@Component({\n  selector: 'ngx-monaco-editor',\n  template: '<div class=\"editor-container\" #editorContainer></div>',\n  styles: [`\n    :host {\n      display: block;\n      height: 200px;\n    }\n\n    .editor-container {\n      width: 100%;\n      height: 98%;\n    }\n  `],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => EditorComponent),\n    multi: true\n  }]\n})\nexport class EditorComponent extends BaseEditor implements ControlValueAccessor {\n  private _value: string = '';\n\n  propagateChange = (_: any) => {};\n  onTouched = () => {};\n\n  @Input('options')\n  set options(options: any) {\n    this._options = Object.assign({}, this.config.defaultOptions, options);\n    if (this._editor) {\n      this._editor.dispose();\n      this.initMonaco(options);\n    }\n  }\n\n  get options(): any {\n    return this._options;\n  }\n\n  @Input('model')\n  set model(model: NgxEditorModel) {\n    this.options.model = model;\n    if (this._editor) {\n      this._editor.dispose();\n      this.initMonaco(this.options);\n    }\n  }\n\n  constructor(private zone: NgZone, @Inject(NGX_MONACO_EDITOR_CONFIG) private editorConfig: NgxMonacoEditorConfig) {\n    super(editorConfig);\n  }\n\n  writeValue(value: any): void {\n    this._value = value || '';\n    // Fix for value change while dispose in process.\n    setTimeout(() => {\n      if (this._editor && !this.options.model) {\n        this._editor.setValue(this._value);\n      }\n    });\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  protected initMonaco(options: any): void {\n\n    const hasModel = !!options.model;\n\n    if (hasModel) {\n      const model = monaco.editor.getModel(options.model.uri || '');\n      if(model) {\n        options.model = model;\n        options.model.setValue(this._value);\n      } else {\n        options.model = monaco.editor.createModel(options.model.value, options.model.language, options.model.uri);\n      }\n    }\n\n    this._editor = monaco.editor.create(this._editorContainer.nativeElement, options);\n\n    if (!hasModel) {\n      this._editor.setValue(this._value);\n    }\n\n    this._editor.onDidChangeModelContent((e: any) => {\n      const value = this._editor.getValue();\n      \n      // value is not propagated to parent when executing outside zone.\n      this.zone.run(() => {\n        this.propagateChange(value);\n        this._value = value;\n      });\n    });\n\n    this._editor.onDidBlurEditorWidget(() => {\n      this.onTouched();\n    });\n\n    // refresh layout on resize event.\n    if (this._windowResizeSubscription) {\n      this._windowResizeSubscription.unsubscribe();\n    }\n    this._windowResizeSubscription = fromEvent(window, 'resize').subscribe(() => this._editor.layout());\n    this.onInit.emit(this._editor);\n  }\n\n}\n","import { Component, Inject, Input } from '@angular/core';\nimport { fromEvent } from 'rxjs';\n\nimport { BaseEditor } from './base-editor';\nimport { NGX_MONACO_EDITOR_CONFIG, NgxMonacoEditorConfig } from './config';\nimport { DiffEditorModel } from './types';\n\n@Component({\n  selector: 'ngx-monaco-diff-editor',\n  template: '<div class=\"editor-container\" #editorContainer></div>',\n  styles: [`\n    :host {\n      display: block;\n      height: 200px;\n    }\n\n    .editor-container {\n      width: 100%;\n      height: 98%;\n    }\n  `]\n})\nexport class DiffEditorComponent extends BaseEditor {\n\n  _originalModel: DiffEditorModel;\n  _modifiedModel: DiffEditorModel;\n\n  @Input('options')\n  set options(options: any) {\n    this._options = Object.assign({}, this.config.defaultOptions, options);\n    if (this._editor) {\n      this._editor.dispose();\n      this.initMonaco(options);\n    }\n  }\n\n  get options(): any {\n    return this._options;\n  }\n\n  @Input('originalModel')\n  set originalModel(model: DiffEditorModel) {\n    this._originalModel = model;\n    if (this._editor) {\n      this._editor.dispose();\n      this.initMonaco(this.options);\n    }\n  }\n\n  @Input('modifiedModel')\n  set modifiedModel(model: DiffEditorModel) {\n    this._modifiedModel = model;\n    if (this._editor) {\n      this._editor.dispose();\n      this.initMonaco(this.options);\n    }\n  }\n\n  constructor(@Inject(NGX_MONACO_EDITOR_CONFIG) private editorConfig: NgxMonacoEditorConfig) {\n    super(editorConfig);\n  }\n\n  protected initMonaco(options: any): void {\n\n    if (!this._originalModel || !this._modifiedModel) {\n      throw new Error('originalModel or modifiedModel not found for ngx-monaco-diff-editor');\n    }\n\n    this._originalModel.language = this._originalModel.language || options.language;\n    this._modifiedModel.language = this._modifiedModel.language || options.language;\n\n    let originalModel = monaco.editor.createModel(this._originalModel.code, this._originalModel.language);\n    let modifiedModel = monaco.editor.createModel(this._modifiedModel.code, this._modifiedModel.language);\n\n    this._editorContainer.nativeElement.innerHTML = '';\n    const theme = options.theme;\n    this._editor = monaco.editor.createDiffEditor(this._editorContainer.nativeElement, options);\n    options.theme = theme;\n    this._editor.setModel({\n      original: originalModel,\n      modified: modifiedModel\n    });\n\n    // refresh layout on resize event.\n    if (this._windowResizeSubscription) {\n      this._windowResizeSubscription.unsubscribe();\n    }\n    this._windowResizeSubscription = fromEvent(window, 'resize').subscribe(() => this._editor.layout());\n    this.onInit.emit(this._editor);\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { NGX_MONACO_EDITOR_CONFIG, NgxMonacoEditorConfig } from './config';\nimport { DiffEditorComponent } from './diff-editor.component';\nimport { EditorComponent } from './editor.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    EditorComponent,\n    DiffEditorComponent\n  ],\n  exports: [\n    EditorComponent,\n    DiffEditorComponent\n  ]\n})\nexport class MonacoEditorModule {\n  public static forRoot(config: NgxMonacoEditorConfig = {}): ModuleWithProviders<MonacoEditorModule> {\n    return {\n      ngModule: MonacoEditorModule,\n      providers: [\n        { provide: NGX_MONACO_EDITOR_CONFIG, useValue: config }\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of my-lib\n */\n\nexport * from './lib/editor.component';\nexport * from './lib/diff-editor.component';\nexport * from './lib/editor.module';\nexport * from './lib/config';\nexport * from './lib/types';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {BaseEditor as ɵa} from './lib/base-editor';"]}
\ No newline at end of file
diff --git a/node_modules/ngx-monaco-editor/lib/base-editor.d.ts b/node_modules/ngx-monaco-editor/lib/base-editor.d.ts
index 6bda0fa..7648a0e 100644
--- a/node_modules/ngx-monaco-editor/lib/base-editor.d.ts
+++ b/node_modules/ngx-monaco-editor/lib/base-editor.d.ts
@@ -1,6 +1,7 @@
 import { AfterViewInit, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
 import { Subscription } from 'rxjs';
 import { NgxMonacoEditorConfig } from './config';
+import * as ɵngcc0 from '@angular/core';
 export declare abstract class BaseEditor implements AfterViewInit, OnDestroy {
     protected config: NgxMonacoEditorConfig;
     _editorContainer: ElementRef;
@@ -12,4 +13,8 @@ export declare abstract class BaseEditor implements AfterViewInit, OnDestroy {
     ngAfterViewInit(): void;
     protected abstract initMonaco(options: any): void;
     ngOnDestroy(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseEditor, never>;
+    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BaseEditor, never, never, {}, { "onInit": "onInit"; }, never>;
 }
+
+//# sourceMappingURL=base-editor.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ngx-monaco-editor/lib/base-editor.d.ts.__ivy_ngcc_bak b/node_modules/ngx-monaco-editor/lib/base-editor.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..6bda0fa
--- /dev/null
+++ b/node_modules/ngx-monaco-editor/lib/base-editor.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,15 @@
+import { AfterViewInit, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
+import { Subscription } from 'rxjs';
+import { NgxMonacoEditorConfig } from './config';
+export declare abstract class BaseEditor implements AfterViewInit, OnDestroy {
+    protected config: NgxMonacoEditorConfig;
+    _editorContainer: ElementRef;
+    onInit: EventEmitter<any>;
+    protected _editor: any;
+    protected _options: any;
+    protected _windowResizeSubscription: Subscription;
+    constructor(config: NgxMonacoEditorConfig);
+    ngAfterViewInit(): void;
+    protected abstract initMonaco(options: any): void;
+    ngOnDestroy(): void;
+}
diff --git a/node_modules/ngx-monaco-editor/lib/base-editor.d.ts.map b/node_modules/ngx-monaco-editor/lib/base-editor.d.ts.map
new file mode 100644
index 0000000..9663ce2
--- /dev/null
+++ b/node_modules/ngx-monaco-editor/lib/base-editor.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"base-editor.d.ts","sources":["base-editor.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { NgxMonacoEditorConfig } from './config';\nexport declare abstract class BaseEditor implements AfterViewInit, OnDestroy {\n    protected config: NgxMonacoEditorConfig;\n    _editorContainer: ElementRef;\n    onInit: EventEmitter<any>;\n    protected _editor: any;\n    protected _options: any;\n    protected _windowResizeSubscription: Subscription;\n    constructor(config: NgxMonacoEditorConfig);\n    ngAfterViewInit(): void;\n    protected abstract initMonaco(options: any): void;\n    ngOnDestroy(): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/ngx-monaco-editor/lib/diff-editor.component.d.ts b/node_modules/ngx-monaco-editor/lib/diff-editor.component.d.ts
index 5193c28..a9558f8 100644
--- a/node_modules/ngx-monaco-editor/lib/diff-editor.component.d.ts
+++ b/node_modules/ngx-monaco-editor/lib/diff-editor.component.d.ts
@@ -1,6 +1,7 @@
 import { BaseEditor } from './base-editor';
 import { NgxMonacoEditorConfig } from './config';
 import { DiffEditorModel } from './types';
+import * as ɵngcc0 from '@angular/core';
 export declare class DiffEditorComponent extends BaseEditor {
     private editorConfig;
     _originalModel: DiffEditorModel;
@@ -11,4 +12,8 @@ export declare class DiffEditorComponent extends BaseEditor {
     set modifiedModel(model: DiffEditorModel);
     constructor(editorConfig: NgxMonacoEditorConfig);
     protected initMonaco(options: any): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<DiffEditorComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DiffEditorComponent, "ngx-monaco-diff-editor", never, { "options": "options"; "originalModel": "originalModel"; "modifiedModel": "modifiedModel"; }, {}, never, never>;
 }
+
+//# sourceMappingURL=diff-editor.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ngx-monaco-editor/lib/diff-editor.component.d.ts.__ivy_ngcc_bak b/node_modules/ngx-monaco-editor/lib/diff-editor.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..5193c28
--- /dev/null
+++ b/node_modules/ngx-monaco-editor/lib/diff-editor.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,14 @@
+import { BaseEditor } from './base-editor';
+import { NgxMonacoEditorConfig } from './config';
+import { DiffEditorModel } from './types';
+export declare class DiffEditorComponent extends BaseEditor {
+    private editorConfig;
+    _originalModel: DiffEditorModel;
+    _modifiedModel: DiffEditorModel;
+    set options(options: any);
+    get options(): any;
+    set originalModel(model: DiffEditorModel);
+    set modifiedModel(model: DiffEditorModel);
+    constructor(editorConfig: NgxMonacoEditorConfig);
+    protected initMonaco(options: any): void;
+}
diff --git a/node_modules/ngx-monaco-editor/lib/diff-editor.component.d.ts.map b/node_modules/ngx-monaco-editor/lib/diff-editor.component.d.ts.map
new file mode 100644
index 0000000..f92734c
--- /dev/null
+++ b/node_modules/ngx-monaco-editor/lib/diff-editor.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"diff-editor.component.d.ts","sources":["diff-editor.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { BaseEditor } from './base-editor';\nimport { NgxMonacoEditorConfig } from './config';\nimport { DiffEditorModel } from './types';\nexport declare class DiffEditorComponent extends BaseEditor {\n    private editorConfig;\n    _originalModel: DiffEditorModel;\n    _modifiedModel: DiffEditorModel;\n    set options(options: any);\n    get options(): any;\n    set originalModel(model: DiffEditorModel);\n    set modifiedModel(model: DiffEditorModel);\n    constructor(editorConfig: NgxMonacoEditorConfig);\n    protected initMonaco(options: any): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/ngx-monaco-editor/lib/editor.component.d.ts b/node_modules/ngx-monaco-editor/lib/editor.component.d.ts
index 68db451..7038cb0 100644
--- a/node_modules/ngx-monaco-editor/lib/editor.component.d.ts
+++ b/node_modules/ngx-monaco-editor/lib/editor.component.d.ts
@@ -3,6 +3,7 @@ import { ControlValueAccessor } from '@angular/forms';
 import { BaseEditor } from './base-editor';
 import { NgxMonacoEditorConfig } from './config';
 import { NgxEditorModel } from './types';
+import * as ɵngcc0 from '@angular/core';
 export declare class EditorComponent extends BaseEditor implements ControlValueAccessor {
     private zone;
     private editorConfig;
@@ -17,4 +18,8 @@ export declare class EditorComponent extends BaseEditor implements ControlValueA
     registerOnChange(fn: any): void;
     registerOnTouched(fn: any): void;
     protected initMonaco(options: any): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<EditorComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<EditorComponent, "ngx-monaco-editor", never, { "options": "options"; "model": "model"; }, {}, never, never>;
 }
+
+//# sourceMappingURL=editor.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ngx-monaco-editor/lib/editor.component.d.ts.__ivy_ngcc_bak b/node_modules/ngx-monaco-editor/lib/editor.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..68db451
--- /dev/null
+++ b/node_modules/ngx-monaco-editor/lib/editor.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,20 @@
+import { NgZone } from '@angular/core';
+import { ControlValueAccessor } from '@angular/forms';
+import { BaseEditor } from './base-editor';
+import { NgxMonacoEditorConfig } from './config';
+import { NgxEditorModel } from './types';
+export declare class EditorComponent extends BaseEditor implements ControlValueAccessor {
+    private zone;
+    private editorConfig;
+    private _value;
+    propagateChange: (_: any) => void;
+    onTouched: () => void;
+    set options(options: any);
+    get options(): any;
+    set model(model: NgxEditorModel);
+    constructor(zone: NgZone, editorConfig: NgxMonacoEditorConfig);
+    writeValue(value: any): void;
+    registerOnChange(fn: any): void;
+    registerOnTouched(fn: any): void;
+    protected initMonaco(options: any): void;
+}
diff --git a/node_modules/ngx-monaco-editor/lib/editor.component.d.ts.map b/node_modules/ngx-monaco-editor/lib/editor.component.d.ts.map
new file mode 100644
index 0000000..becd5c8
--- /dev/null
+++ b/node_modules/ngx-monaco-editor/lib/editor.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"editor.component.d.ts","sources":["editor.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { NgZone } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { BaseEditor } from './base-editor';\nimport { NgxMonacoEditorConfig } from './config';\nimport { NgxEditorModel } from './types';\nexport declare class EditorComponent extends BaseEditor implements ControlValueAccessor {\n    private zone;\n    private editorConfig;\n    private _value;\n    propagateChange: (_: any) => void;\n    onTouched: () => void;\n    set options(options: any);\n    get options(): any;\n    set model(model: NgxEditorModel);\n    constructor(zone: NgZone, editorConfig: NgxMonacoEditorConfig);\n    writeValue(value: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    protected initMonaco(options: any): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/ngx-monaco-editor/lib/editor.module.d.ts b/node_modules/ngx-monaco-editor/lib/editor.module.d.ts
index 4c3994a..7c30a70 100644
--- a/node_modules/ngx-monaco-editor/lib/editor.module.d.ts
+++ b/node_modules/ngx-monaco-editor/lib/editor.module.d.ts
@@ -1,5 +1,13 @@
 import { ModuleWithProviders } from '@angular/core';
 import { NgxMonacoEditorConfig } from './config';
+import * as ɵngcc0 from '@angular/core';
+import * as ɵngcc1 from './editor.component';
+import * as ɵngcc2 from './diff-editor.component';
+import * as ɵngcc3 from '@angular/common';
 export declare class MonacoEditorModule {
     static forRoot(config?: NgxMonacoEditorConfig): ModuleWithProviders<MonacoEditorModule>;
+    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<MonacoEditorModule, [typeof ɵngcc1.EditorComponent, typeof ɵngcc2.DiffEditorComponent], [typeof ɵngcc3.CommonModule], [typeof ɵngcc1.EditorComponent, typeof ɵngcc2.DiffEditorComponent]>;
+    static ɵinj: ɵngcc0.ɵɵInjectorDef<MonacoEditorModule>;
 }
+
+//# sourceMappingURL=editor.module.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ngx-monaco-editor/lib/editor.module.d.ts.__ivy_ngcc_bak b/node_modules/ngx-monaco-editor/lib/editor.module.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..4c3994a
--- /dev/null
+++ b/node_modules/ngx-monaco-editor/lib/editor.module.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,5 @@
+import { ModuleWithProviders } from '@angular/core';
+import { NgxMonacoEditorConfig } from './config';
+export declare class MonacoEditorModule {
+    static forRoot(config?: NgxMonacoEditorConfig): ModuleWithProviders<MonacoEditorModule>;
+}
diff --git a/node_modules/ngx-monaco-editor/lib/editor.module.d.ts.map b/node_modules/ngx-monaco-editor/lib/editor.module.d.ts.map
new file mode 100644
index 0000000..8f1bbef
--- /dev/null
+++ b/node_modules/ngx-monaco-editor/lib/editor.module.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"editor.module.d.ts","sources":["editor.module.d.ts"],"names":[],"mappings":"AAAA;AACA;;;;;AACA;AACA;;;AACA","sourcesContent":["import { ModuleWithProviders } from '@angular/core';\nimport { NgxMonacoEditorConfig } from './config';\nexport declare class MonacoEditorModule {\n    static forRoot(config?: NgxMonacoEditorConfig): ModuleWithProviders<MonacoEditorModule>;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/ngx-monaco-editor/lib/monaco.d.ts b/node_modules/ngx-monaco-editor/lib/monaco.d.ts
index 1047328..20e6d8c 100644
--- a/node_modules/ngx-monaco-editor/lib/monaco.d.ts
+++ b/node_modules/ngx-monaco-editor/lib/monaco.d.ts
@@ -4201,6 +4201,7 @@ declare namespace monaco.editor {
      * A rich code editor.
      */
     export interface ICodeEditor extends IEditor {
+        _codeEditorService: any;
         /**
          * An event emitted when the content of the current model has changed.
          * @event
diff --git a/node_modules/ngx-monaco-editor/ngx-monaco-editor.d.ts b/node_modules/ngx-monaco-editor/ngx-monaco-editor.d.ts
index 6cff514..55cf0d8 100644
--- a/node_modules/ngx-monaco-editor/ngx-monaco-editor.d.ts
+++ b/node_modules/ngx-monaco-editor/ngx-monaco-editor.d.ts
@@ -3,3 +3,5 @@
  */
 export * from './public-api';
 export { BaseEditor as ɵa } from './lib/base-editor';
+
+//# sourceMappingURL=ngx-monaco-editor.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ngx-monaco-editor/ngx-monaco-editor.d.ts.__ivy_ngcc_bak b/node_modules/ngx-monaco-editor/ngx-monaco-editor.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..6cff514
--- /dev/null
+++ b/node_modules/ngx-monaco-editor/ngx-monaco-editor.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,5 @@
+/**
+ * Generated bundle index. Do not edit.
+ */
+export * from './public-api';
+export { BaseEditor as ɵa } from './lib/base-editor';
diff --git a/node_modules/ngx-monaco-editor/ngx-monaco-editor.d.ts.map b/node_modules/ngx-monaco-editor/ngx-monaco-editor.d.ts.map
new file mode 100644
index 0000000..f55014f
--- /dev/null
+++ b/node_modules/ngx-monaco-editor/ngx-monaco-editor.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"ngx-monaco-editor.d.ts","sources":["ngx-monaco-editor.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\nexport { BaseEditor as ɵa } from './lib/base-editor';\n"]}
\ No newline at end of file
